// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: proto/car.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarClient is the client API for Car service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarClient interface {
	GetCars(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Car_GetCarsClient, error)
	GetCarById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CarInfo, error)
	CreatCar(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateCar(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteCar(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type carClient struct {
	cc grpc.ClientConnInterface
}

func NewCarClient(cc grpc.ClientConnInterface) CarClient {
	return &carClient{cc}
}

func (c *carClient) GetCars(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Car_GetCarsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Car_ServiceDesc.Streams[0], "/Car/GetCars", opts...)
	if err != nil {
		return nil, err
	}
	x := &carGetCarsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Car_GetCarsClient interface {
	Recv() (*CarInfo, error)
	grpc.ClientStream
}

type carGetCarsClient struct {
	grpc.ClientStream
}

func (x *carGetCarsClient) Recv() (*CarInfo, error) {
	m := new(CarInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *carClient) GetCarById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CarInfo, error) {
	out := new(CarInfo)
	err := c.cc.Invoke(ctx, "/Car/GetCarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) CreatCar(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/Car/CreatCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) UpdateCar(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Car/UpdateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) DeleteCar(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Car/DeleteCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServer is the server API for Car service.
// All implementations must embed UnimplementedCarServer
// for forward compatibility
type CarServer interface {
	GetCars(*Empty, Car_GetCarsServer) error
	GetCarById(context.Context, *Id) (*CarInfo, error)
	CreatCar(context.Context, *CarInfo) (*Id, error)
	UpdateCar(context.Context, *CarInfo) (*Status, error)
	DeleteCar(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedCarServer()
}

// UnimplementedCarServer must be embedded to have forward compatible implementations.
type UnimplementedCarServer struct {
}

func (UnimplementedCarServer) GetCars(*Empty, Car_GetCarsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCars not implemented")
}
func (UnimplementedCarServer) GetCarById(context.Context, *Id) (*CarInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarById not implemented")
}
func (UnimplementedCarServer) CreatCar(context.Context, *CarInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatCar not implemented")
}
func (UnimplementedCarServer) UpdateCar(context.Context, *CarInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedCarServer) DeleteCar(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarServer) mustEmbedUnimplementedCarServer() {}

// UnsafeCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServer will
// result in compilation errors.
type UnsafeCarServer interface {
	mustEmbedUnimplementedCarServer()
}

func RegisterCarServer(s grpc.ServiceRegistrar, srv CarServer) {
	s.RegisterService(&Car_ServiceDesc, srv)
}

func _Car_GetCars_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CarServer).GetCars(m, &carGetCarsServer{stream})
}

type Car_GetCarsServer interface {
	Send(*CarInfo) error
	grpc.ServerStream
}

type carGetCarsServer struct {
	grpc.ServerStream
}

func (x *carGetCarsServer) Send(m *CarInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Car_GetCarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetCarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Car/GetCarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetCarById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_CreatCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).CreatCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Car/CreatCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).CreatCar(ctx, req.(*CarInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Car/UpdateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).UpdateCar(ctx, req.(*CarInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Car/DeleteCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).DeleteCar(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Car_ServiceDesc is the grpc.ServiceDesc for Car service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Car_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Car",
	HandlerType: (*CarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarById",
			Handler:    _Car_GetCarById_Handler,
		},
		{
			MethodName: "CreatCar",
			Handler:    _Car_CreatCar_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _Car_UpdateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _Car_DeleteCar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCars",
			Handler:       _Car_GetCars_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/car.proto",
}
